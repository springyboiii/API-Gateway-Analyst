export declare const packageExists: (moduleName: string, relative?: boolean, basePath?: string) => boolean;
export declare type PackageManifest = {
    version: string;
    dependencies: Record<string, string>;
    devDependencies: Record<string, string>;
};
declare type RequireBaseOptions = {
    basePath?: string;
    relative?: boolean;
};
export declare function requireFromPackage<T = unknown | null>(pkg: string, opts: RequireBaseOptions & {
    silent: true;
}): T | null;
export declare function requireFromPackage<T = unknown>(pkg: string, opts?: RequireBaseOptions): T;
export declare function isSslKey(content: string): boolean;
export declare function isSslCert(content: string): boolean;
export declare function isFilePath(fp: string): boolean;
export declare function requirePackageManifest<T = PackageManifest>(pkg: string, opts: RequireBaseOptions & {
    silent: true;
}): Promise<T | null>;
export declare function requirePackageManifest<T = PackageManifest>(pkg: string, opts?: RequireBaseOptions): Promise<T>;
export declare function resolvePackageVersion(basePath: string, pkgName: string): Promise<string | null>;
export declare function resolveBuiltInPackageVersion(pkgName: string): Promise<string | null>;
export declare function resolveUserPackageVersion(pkgName: string): Promise<string | null>;
export {};
//# sourceMappingURL=package.d.ts.map