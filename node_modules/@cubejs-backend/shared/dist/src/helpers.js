"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.oldStreamToArray = exports.streamToArray = exports.checkNonNullable = exports.assertNonNullable = exports.execInDir = exports.executeCommand = exports.getRealType = void 0;
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const stream_1 = require("stream");
const shelljs_1 = __importDefault(require("shelljs"));
function getRealType(value) {
    if (value === null) {
        return 'null';
    }
    return typeof value;
}
exports.getRealType = getRealType;
async function executeCommand(command, args, options = {}) {
    const argsArray = typeof args === 'string' ? args.split(' ') : args;
    const child = cross_spawn_1.default(command, argsArray, { stdio: 'inherit', ...options });
    return new Promise((resolve, reject) => {
        child.on('close', (code) => {
            if (code !== 0) {
                reject(new Error(`${command} ${argsArray.join(' ')} failed with exit code ${code}. Please check your console.`));
                return;
            }
            resolve();
        });
    });
}
exports.executeCommand = executeCommand;
// Executes `command` in `dir`, returns the error code. Preserves working directory.
function execInDir(dir, command) {
    const crtDir = process.cwd();
    try {
        process.chdir(dir);
        const result = shelljs_1.default.exec(command);
        return result.code;
    }
    finally {
        process.chdir(crtDir);
    }
}
exports.execInDir = execInDir;
function assertNonNullable(name, x) {
    if (x === undefined || x === null) {
        throw new Error(`${name} is not defined.`);
    }
}
exports.assertNonNullable = assertNonNullable;
// If x is nullable, throws and error, else return x with a nonnulable type.
function checkNonNullable(name, x) {
    assertNonNullable(name, x);
    return x;
}
exports.checkNonNullable = checkNonNullable;
async function streamToArray(stream) {
    const result = [];
    for await (const x of stream) {
        result.push(x);
    }
    return result;
}
exports.streamToArray = streamToArray;
// https://nodejs.org/api/stream.html#readablewrapstream
// https://nodejs.org/api/stream.html#compatibility-with-older-nodejs-versions
async function oldStreamToArray(stream) {
    return streamToArray(new stream_1.Readable().wrap(stream));
}
exports.oldStreamToArray = oldStreamToArray;
//# sourceMappingURL=helpers.js.map