"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveUserPackageVersion = exports.resolveBuiltInPackageVersion = exports.resolvePackageVersion = exports.requirePackageManifest = exports.isFilePath = exports.isSslCert = exports.isSslKey = exports.requireFromPackage = exports.packageExists = void 0;
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs"));
const packageExists = (moduleName, relative = false, basePath = process.cwd()) => {
    if (relative) {
        try {
            // eslint-disable-next-line global-require,import/no-dynamic-require
            require.resolve(`${moduleName}`);
            return true;
        }
        catch (error) {
            return false;
        }
    }
    const modulePath = path_1.default.join(basePath, 'node_modules', moduleName);
    return fs.existsSync(modulePath);
};
exports.packageExists = packageExists;
function requireFromPackage(pkg, options) {
    const { basePath = process.cwd(), relative = false, silent = undefined } = options || {};
    const exists = exports.packageExists(pkg, relative, basePath);
    if (!exists) {
        if (silent) {
            return null;
        }
        throw new Error(`${pkg} dependency not found. Please run this command from project directory.`);
    }
    if (relative) {
        const resolvePath = require.resolve(`${pkg}`);
        // eslint-disable-next-line global-require,import/no-dynamic-require
        return require(resolvePath);
    }
    // eslint-disable-next-line global-require,import/no-dynamic-require
    return require(path_1.default.join(basePath, 'node_modules', pkg));
}
exports.requireFromPackage = requireFromPackage;
function isSslKey(content) {
    return content.startsWith('-----BEGIN RSA PRIVATE KEY-----');
}
exports.isSslKey = isSslKey;
function isSslCert(content) {
    return content.startsWith('-----BEGIN CERTIFICATE-----');
}
exports.isSslCert = isSslCert;
function isFilePath(fp) {
    if (fp === '') {
        return false;
    }
    const resolvedPath = path_1.default.parse(fp);
    if ((resolvedPath.root || resolvedPath.dir) && resolvedPath.name) {
        return true;
    }
    return false;
}
exports.isFilePath = isFilePath;
async function requirePackageManifest(pkgName, options) {
    return requireFromPackage(path_1.default.join(pkgName, 'package.json'), options);
}
exports.requirePackageManifest = requirePackageManifest;
async function resolvePackageVersion(basePath, pkgName) {
    const resolvedManifest = await requirePackageManifest(pkgName, {
        basePath,
        relative: false,
        silent: true,
    });
    if (resolvedManifest) {
        return resolvedManifest.version;
    }
    return null;
}
exports.resolvePackageVersion = resolvePackageVersion;
async function resolveBuiltInPackageVersion(pkgName) {
    return resolvePackageVersion('/cube', pkgName);
}
exports.resolveBuiltInPackageVersion = resolveBuiltInPackageVersion;
async function resolveUserPackageVersion(pkgName) {
    return resolvePackageVersion(
    // In the official docker image, it will be resolved to /cube/conf
    process.cwd(), pkgName);
}
exports.resolveUserPackageVersion = resolveUserPackageVersion;
//# sourceMappingURL=package.js.map