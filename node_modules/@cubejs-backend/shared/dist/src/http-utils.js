"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadAndGunzip = exports.downloadAndExtractFile = exports.streamWithProgress = void 0;
const decompress_1 = __importDefault(require("decompress"));
const node_fetch_1 = __importStar(require("node-fetch"));
const bytes_1 = __importDefault(require("bytes"));
const throttle_debounce_1 = require("throttle-debounce");
const cli_progress_1 = require("cli-progress");
const fs_extra_1 = require("fs-extra");
const fs_1 = __importDefault(require("fs"));
const os = __importStar(require("os"));
const crypto_1 = __importDefault(require("crypto"));
const path = __importStar(require("path"));
const zlib_1 = require("zlib");
const errors_1 = require("./errors");
const proxy_1 = require("./proxy");
async function streamWithProgress(response, progressCallback) {
    const total = parseInt(response.headers.get('Content-Length') || '0', 10);
    const startedAt = Date.now();
    let done = 0;
    const throttled = throttle_debounce_1.throttle(10, () => {
        const elapsed = (Date.now() - startedAt) / 1000;
        const rate = done / elapsed;
        const speed = `${bytes_1.default(rate)}/s`;
        const estimated = total / rate;
        const progress = parseInt(((done / total) * 100), 10);
        const eta = estimated - elapsed;
        progressCallback({
            progress,
            eta,
            speed
        });
    });
    const saveFilePath = path.join(os.tmpdir(), crypto_1.default.randomBytes(16).toString('hex'));
    const writer = fs_1.default.createWriteStream(saveFilePath);
    response.body.pipe(writer);
    response.body.on('data', (chunk) => {
        done += chunk.length;
        throttled();
    });
    return new Promise((resolve) => {
        // Wait before writer will finish, because response can be done earlier then extracting
        writer.on('finish', () => {
            resolve(saveFilePath);
        });
    });
}
exports.streamWithProgress = streamWithProgress;
async function downloadAndExtractFile(url, { cwd }) {
    const request = new node_fetch_1.Request(url, {
        headers: new node_fetch_1.Headers({
            'Content-Type': 'application/octet-stream',
        }),
        agent: await proxy_1.getHttpAgentForProxySettings(),
    });
    const response = await node_fetch_1.default(request);
    if (!response.ok) {
        throw new Error(`unexpected response ${response.statusText}`);
    }
    const bar = new cli_progress_1.SingleBar({
        format: 'Downloading [{bar}] {percentage}% | Speed: {speed}',
    });
    bar.start(100, 0);
    try {
        fs_extra_1.mkdirpSync(cwd);
    }
    catch (e) {
        errors_1.internalExceptions(e);
    }
    const savedFilePath = await streamWithProgress(response, ({ progress, speed, eta }) => {
        bar.update(progress, {
            speed,
            eta,
        });
    });
    await decompress_1.default(savedFilePath, cwd);
    try {
        fs_1.default.unlinkSync(savedFilePath);
    }
    catch (e) {
        errors_1.internalExceptions(e);
    }
    bar.stop();
}
exports.downloadAndExtractFile = downloadAndExtractFile;
async function downloadAndGunzip(url) {
    const response = await node_fetch_1.default(url);
    const gz = await response.arrayBuffer();
    const buffer = await zlib_1.gunzipSync(gz);
    return buffer.toString();
}
exports.downloadAndGunzip = downloadAndGunzip;
//# sourceMappingURL=http-utils.js.map