"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureCreateCommand = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = __importDefault(require("inquirer"));
const path_1 = __importDefault(require("path"));
const crypto_1 = __importDefault(require("crypto"));
const shared_1 = require("@cubejs-backend/shared");
const utils_1 = require("../utils");
const templates_1 = __importDefault(require("../templates"));
// @todo There is another function with similar name inside utils, but without analytics
const logStage = (stage) => {
    console.log(`- ${stage}`);
};
const create = async (projectName, options) => {
    options.template = options.template || 'docker';
    const createAppOptions = { projectName, dbType: options.dbType, template: options.template };
    utils_1.event({
        event: 'Create App',
        ...createAppOptions,
    });
    if (await fs_extra_1.default.pathExists(projectName)) {
        await utils_1.displayError(`We cannot create a project called ${chalk_1.default.green(projectName)}: directory already exist.\n`, createAppOptions);
    }
    if (!templates_1.default[options.template]) {
        await utils_1.displayError(`Unknown template ${chalk_1.default.red(options.template)}`, createAppOptions);
    }
    const templateConfig = templates_1.default[options.template];
    await fs_extra_1.default.ensureDir(projectName);
    process.chdir(projectName);
    const cliManifest = utils_1.loadCliManifest();
    logStage('Creating project structure');
    await utils_1.writePackageJson({
        name: projectName,
        version: '0.0.1',
        private: true,
        scripts: templateConfig.scripts,
        template: options.template,
        templateVersion: cliManifest.version,
    });
    logStage('Installing server dependencies');
    await utils_1.npmInstall(['@cubejs-backend/server'], options.template === 'docker');
    if (!options.dbType) {
        const Drivers = shared_1.requireFromPackage('@cubejs-backend/server-core/dist/src/core/DriverDependencies.js');
        const prompt = await inquirer_1.default.prompt([{
                type: 'list',
                name: 'dbType',
                message: 'Select database',
                choices: Object.keys(Drivers)
            }]);
        options.dbType = prompt.dbType;
    }
    logStage('Installing DB driver dependencies');
    const CubejsServer = shared_1.requireFromPackage('@cubejs-backend/server');
    const driverPackageName = CubejsServer.driverDependencies(options.dbType);
    if (!driverPackageName) {
        await utils_1.displayError(`Unsupported db type: ${chalk_1.default.green(options.dbType)}`, createAppOptions);
    }
    await utils_1.npmInstall([driverPackageName], options.template === 'docker');
    if (driverPackageName === '@cubejs-backend/jdbc-driver') {
        logStage('Installing JDBC dependencies');
        // eslint-disable-next-line import/no-dynamic-require,global-require,@typescript-eslint/no-var-requires
        const JDBCDriver = require(path_1.default.join(process.cwd(), 'node_modules', '@cubejs-backend', 'jdbc-driver', 'driver', 'JDBCDriver'));
        const { jdbcDriver } = await inquirer_1.default.prompt([{
                type: 'list',
                name: 'jdbcDriver',
                message: 'Select JDBC driver',
                choices: JDBCDriver.getSupportedDrivers(),
            }]);
        const dbTypeDescription = JDBCDriver.dbTypeDescription(jdbcDriver);
        if (!dbTypeDescription) {
            await utils_1.displayError(`Unsupported JDBC driver: ${chalk_1.default.green(jdbcDriver)}`, createAppOptions);
        }
        const newPackageJson = await fs_extra_1.default.readJson('package.json');
        if (dbTypeDescription.mavenDependency) {
            newPackageJson.java = {
                dependencies: [dbTypeDescription.mavenDependency]
            };
        }
        newPackageJson.scripts = newPackageJson.scripts || {};
        newPackageJson.scripts.install = './node_modules/.bin/node-java-maven';
        await utils_1.writePackageJson(newPackageJson);
        await utils_1.executeCommand('npm', ['install']);
    }
    logStage('Writing files from template');
    const driverClass = shared_1.requireFromPackage(driverPackageName);
    const driverPackageManifest = await shared_1.requirePackageManifest(driverPackageName);
    const serverCorePackageManifest = await shared_1.requirePackageManifest('@cubejs-backend/server-core');
    const serverPackageManifest = await shared_1.requirePackageManifest('@cubejs-backend/server');
    const dockerVersion = utils_1.findMaxVersion([
        serverPackageManifest.version,
        serverCorePackageManifest.version,
        driverPackageManifest.version
    ]);
    const env = {
        dbType: options.dbType,
        apiSecret: crypto_1.default.randomBytes(64).toString('hex'),
        projectName,
        dockerVersion: `v${dockerVersion.version}`,
        driverEnvVariables: driverClass.driverEnvVariables && driverClass.driverEnvVariables()
    };
    await Promise.all(Object.keys(templateConfig.files).map(async (fileName) => {
        await fs_extra_1.default.ensureDir(path_1.default.dirname(fileName));
        await fs_extra_1.default.writeFile(fileName, templateConfig.files[fileName](env));
    }));
    if (templateConfig.dependencies) {
        logStage('Installing template dependencies');
        await utils_1.npmInstall(templateConfig.dependencies);
    }
    if (templateConfig.devDependencies) {
        logStage('Installing template dev dependencies');
        await utils_1.npmInstall(templateConfig.devDependencies);
    }
    await utils_1.event({
        event: 'Create App Success',
        projectName,
        dbType: options.dbType
    });
    logStage(`${chalk_1.default.green(projectName)} app has been created ðŸŽ‰`);
    console.log();
    console.log('ðŸ“Š Next step: run dev server');
    console.log();
    console.log(`     $ cd ${projectName}`);
    console.log('     $ npm run dev');
    console.log();
};
function configureCreateCommand(program) {
    program
        .command('create <name>')
        .option('-d, --db-type <db-type>', 'Preconfigure for selected database.\n\t\t\t     ' +
        'Options: postgres, mysql, mongobi, athena, redshift, bigquery, mssql, clickhouse, snowflake, presto, questdb, materialize, firebolt')
        .option('-t, --template <template>', 'App template. Options: docker (default), express, serverless, serverless-google.')
        .description('Create new Cube.js app')
        .action((projectName, options) => create(projectName, options)
        .catch(e => utils_1.displayError(e.stack || e, { projectName, dbType: options.dbType })))
        .on('--help', () => {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('  $ cubejs create hello-world -d postgres');
    });
}
exports.configureCreateCommand = configureCreateCommand;
//# sourceMappingURL=create.js.map