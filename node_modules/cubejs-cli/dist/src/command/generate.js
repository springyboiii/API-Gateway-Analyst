"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureGenerateCommand = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const shared_1 = require("@cubejs-backend/shared");
const utils_1 = require("../utils");
// @todo There is another function with similar name inside utils, but without analytics
const logStage = (stage) => {
    console.log(`- ${stage}`);
};
const generate = async (options) => {
    const generateSchemaOptions = { tables: options.tables };
    utils_1.event({
        event: 'Generate Schema',
        ...generateSchemaOptions,
    });
    if (!options.tables) {
        await utils_1.displayError([
            'You must pass table names to generate schema from (-t).',
            '',
            'Example: ',
            ' $ cubejs generate -t orders,customers'
        ], generateSchemaOptions);
    }
    const relative = shared_1.isDockerImage();
    if (!shared_1.packageExists('@cubejs-backend/server', relative)) {
        await utils_1.displayError('@cubejs-backend/server dependency not found. Please run generate command from project directory.', generateSchemaOptions);
    }
    logStage('Fetching DB schema');
    const serverPackage = shared_1.requireFromPackage('@cubejs-backend/server', {
        relative,
    });
    if (!serverPackage.ServerContainer) {
        await utils_1.displayError('@cubejs-backend/server is too old. Please use @cubejs-backend/server >= v0.26.11', generateSchemaOptions);
    }
    const container = new serverPackage.ServerContainer({ debug: false });
    const configuration = await container.lookupConfiguration();
    const server = await container.runServerInstance(configuration, true, Object.keys(configuration).length === 0);
    const driver = await server.getDriver({
        dataSource: options.dataSource,
        authInfo: null,
        securityContext: null,
        requestId: 'CLI REQUEST'
    });
    const dbSchema = await driver.tablesSchema();
    await driver.release();
    logStage('Generating schema files');
    const ScaffoldingTemplate = shared_1.requireFromPackage('@cubejs-backend/schema-compiler/scaffolding/ScaffoldingTemplate.js', {
        relative,
    });
    const scaffoldingTemplate = new ScaffoldingTemplate(dbSchema, driver);
    const { tables, dataSource } = options;
    const files = scaffoldingTemplate.generateFilesByTableNames(tables, { dataSource });
    await Promise.all(files.map(file => fs_extra_1.default.writeFile(path_1.default.join('schema', file.fileName), file.content)));
    await utils_1.event({
        event: 'Generate Schema Success',
        ...generateSchemaOptions
    });
    logStage(`Schema for ${options.tables.join(', ')} was successfully generated ðŸŽ‰`);
};
const list = (val) => val.split(',');
function configureGenerateCommand(program) {
    program
        .command('generate')
        .option('-t, --tables <tables>', 'Comma delimited list of tables to generate schema from', list)
        .option('-d, --dataSource <dataSource>', '', 'default')
        .description('Generate Cube.js schema from DB tables schema')
        .action((options) => generate(options)
        .catch(e => utils_1.displayError(e.stack || e, { dbType: options.dbType })))
        .on('--help', () => {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('  $ cubejs generate -t orders,customers');
    });
}
exports.configureGenerateCommand = configureGenerateCommand;
//# sourceMappingURL=generate.js.map