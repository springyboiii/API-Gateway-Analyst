"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureTokenCommand = exports.collect = exports.token = exports.defaultExpiry = void 0;
const chalk_1 = __importDefault(require("chalk"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const shared_1 = require("@cubejs-backend/shared");
const utils_1 = require("../utils");
exports.defaultExpiry = '30 days';
const parsePayload = (payloadArray = []) => {
    const result = {};
    payloadArray.forEach((entry = '') => {
        const [key, value] = entry.split('=');
        if (key && value) {
            result[key] = value;
        }
    });
    return result;
};
const token = async (options) => {
    utils_1.event({
        event: 'Generate Token'
    });
    const cubejsServer = shared_1.requireFromPackage('@cubejs-backend/server', {
        relative: shared_1.isDockerImage()
    });
    const { expiry = exports.defaultExpiry, secret = cubejsServer.apiSecret() } = options;
    if (!secret) {
        throw new Error('No app secret found');
    }
    const extraOptions = {};
    if (expiry !== '0') {
        extraOptions.expiresIn = expiry;
    }
    const payload = {
        ...parsePayload(options.payload),
    };
    const userContext = parsePayload(options.userContext);
    if (userContext) {
        utils_1.displayWarning('Option --user-context was deprecated and payload will be stored inside root instead of u');
        // eslint-disable-next-line no-restricted-syntax
        for (const key of Object.keys(userContext)) {
            if (key in payload) {
                utils_1.displayWarning(`Key ${key} already exists inside payload and will be overritten by user-context`);
            }
            payload[key] = userContext[key];
        }
    }
    console.log('Generating Cube.js JWT token');
    console.log('');
    console.log(`${chalk_1.default.yellow('-----------------------------------------------------------------------------------------')}`);
    console.log(`  ${chalk_1.default.yellow('Use these manually generated tokens in production with caution.')}`);
    console.log(`  ${chalk_1.default.yellow(`Please refer to ${chalk_1.default.cyan('https://cube.dev/docs/security')} for production security best practices.`)}`);
    console.log(`${chalk_1.default.yellow('-----------------------------------------------------------------------------------------')}`);
    console.log('');
    console.log(`Expires in: ${chalk_1.default.green(expiry)}`);
    console.log(`Payload: ${chalk_1.default.green(JSON.stringify(payload))}`);
    console.log('');
    const signedToken = jsonwebtoken_1.default.sign(payload, secret, extraOptions);
    console.log(`Token: ${chalk_1.default.green(signedToken)}`);
    await utils_1.event({
        event: 'Generate Token Success'
    });
    return signedToken;
};
exports.token = token;
const collect = (val, memo) => [val, ...memo];
exports.collect = collect;
function configureTokenCommand(program) {
    program
        .command('token')
        .option('-e, --expiry [expiry]', 'Token expiry. Set to 0 for no expiry')
        .option('-s, --secret [secret]', 'Cube.js app secret. Also can be set via environment variable CUBEJS_API_SECRET')
        .option('-p, --payload [values]', 'Payload. Example: -p foo=bar', exports.collect, [])
        .option('-u, --user-context [values]', 'USER_CONTEXT. Example: -u baz=qux', exports.collect, [])
        .description('Create JWT token')
        .action((options) => exports.token(options)
        .catch(e => utils_1.displayError(e.stack || e)))
        .on('--help', () => {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('  $ cubejs token -e "1 day" -p foo=bar -p cool=true');
    });
}
exports.configureTokenCommand = configureTokenCommand;
//# sourceMappingURL=token.js.map