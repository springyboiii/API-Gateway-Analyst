"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const semver_1 = __importDefault(require("semver"));
const shared_1 = require("@cubejs-backend/shared");
const utils_1 = require("../utils");
async function proxyCommand(program, command) {
    const relative = shared_1.isDockerImage();
    const serverPackageExists = shared_1.packageExists('@cubejs-backend/server', relative);
    const commandInfo = program
        .command(command);
    if (serverPackageExists) {
        const packageManifest = await shared_1.requirePackageManifest('@cubejs-backend/server', {
            relative,
        });
        if (packageManifest.cubejsCliVersion) {
            const cliManifest = utils_1.loadCliManifest();
            if (semver_1.default.satisfies(cliManifest.version, packageManifest.cubejsCliVersion)) {
                const OriginalCommandPackage = shared_1.requireFromPackage(`@cubejs-backend/server/dist/command/${command}.js`, {
                    relative,
                });
                commandInfo
                    .description(OriginalCommandPackage.default.description);
                if (OriginalCommandPackage.default.flags) {
                    const commandFlags = OriginalCommandPackage.default.flags;
                    // eslint-disable-next-line no-restricted-syntax
                    for (const [name, option] of Object.entries(commandFlags)) {
                        commandInfo
                            .option(`--${name}`, option.description || '', option.default);
                    }
                }
                commandInfo.action(async () => {
                    try {
                        // eslint-disable-next-line new-cap
                        const CommandInstance = new OriginalCommandPackage.default(process.argv.slice(3));
                        await CommandInstance.run();
                    }
                    catch (e) {
                        utils_1.displayError(e.stack || e.message);
                    }
                });
                return;
            }
            const message = `${chalk_1.default.red('Unavailable.')} @cubejs-backend/server inside current directory requires ` +
                `cubejs-cli (${packageManifest.cubejsCliVersion}).`;
            commandInfo
                .description(message)
                .action(() => utils_1.displayError(message));
            return;
        }
        const message = `${chalk_1.default.red('Unavailable.')} Please upgrade @cubejs-backend/server.`;
        commandInfo
            .description(message)
            .action(() => utils_1.displayError(message));
    }
    else {
        const message = `${chalk_1.default.red('Unavailable.')} Please run this command from project directory.`;
        commandInfo
            .description(message)
            .action(() => utils_1.displayError(message));
    }
    commandInfo
        .on('--help', () => {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log(`  $ cubejs ${command}`);
    });
}
exports.proxyCommand = proxyCommand;
//# sourceMappingURL=proxy-command.js.map