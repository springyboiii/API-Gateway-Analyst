"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureDeployCommand = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const cli_progress_1 = __importDefault(require("cli-progress"));
const deploy_1 = require("../deploy");
const utils_1 = require("../utils");
const config_1 = require("../config");
const deploy = async ({ directory, auth, uploadEnv, token }) => {
    if (!(await fs_extra_1.default.pathExists(path_1.default.join(process.cwd(), 'node_modules', '@cubejs-backend/server-core')))) {
        await utils_1.displayError('@cubejs-backend/server-core dependency not found. Please run deploy command from project root directory and ensure npm install has been run.');
    }
    if (token) {
        const config = new config_1.Config();
        await config.addAuthToken(token);
        await utils_1.event({
            event: 'Cube Cloud CLI Authenticate'
        });
        console.log('Token successfully added!');
    }
    const config = new config_1.Config();
    const bar = new cli_progress_1.default.SingleBar({
        format: '- Uploading files | {bar} | {percentage}% || {value} / {total} | {file}',
        barCompleteChar: '\u2588',
        barIncompleteChar: '\u2591',
        hideCursor: true
    });
    const deployDir = new deploy_1.DeployDirectory({ directory });
    const fileHashes = await deployDir.fileHashes();
    const upstreamHashes = await config.cloudReq({
        url: (deploymentId) => `build/deploy/${deploymentId}/files`,
        method: 'GET',
        auth
    });
    const { transaction, deploymentName } = await config.cloudReq({
        url: (deploymentId) => `build/deploy/${deploymentId}/start-upload`,
        method: 'POST',
        auth
    });
    if (uploadEnv) {
        const envVariables = await config.envFile(`${directory}/.env`);
        await config.cloudReq({
            url: (deploymentId) => `build/deploy/${deploymentId}/set-env`,
            method: 'POST',
            body: {
                envVariables: JSON.stringify(envVariables),
            },
            auth
        });
    }
    await utils_1.logStage(`Deploying ${deploymentName}...`, 'Cube Cloud CLI Deploy');
    const files = Object.keys(fileHashes);
    const fileHashesPosix = {};
    bar.start(files.length, 0, {
        file: ''
    });
    try {
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            bar.update(i, { file });
            const filePosix = file.split(path_1.default.sep).join(path_1.default.posix.sep);
            fileHashesPosix[filePosix] = fileHashes[file];
            if (!upstreamHashes[filePosix] || upstreamHashes[filePosix].hash !== fileHashes[file].hash) {
                await config.cloudReq({
                    url: (deploymentId) => `build/deploy/${deploymentId}/upload-file`,
                    method: 'POST',
                    formData: {
                        transaction: JSON.stringify(transaction),
                        fileName: filePosix,
                        file: {
                            value: fs_extra_1.default.createReadStream(path_1.default.join(directory, file)),
                            options: {
                                filename: path_1.default.basename(file),
                                contentType: 'application/octet-stream'
                            }
                        }
                    },
                    auth
                });
            }
        }
        bar.update(files.length, { file: 'Post processing...' });
        await config.cloudReq({
            url: (deploymentId) => `build/deploy/${deploymentId}/finish-upload`,
            method: 'POST',
            body: {
                transaction,
                files: fileHashesPosix
            },
            auth
        });
    }
    finally {
        bar.stop();
    }
    await utils_1.logStage('Done ðŸŽ‰', 'Cube Cloud CLI Deploy Success');
};
function configureDeployCommand(program) {
    program
        .command('deploy')
        .description('Deploy project to Cube Cloud')
        .option('--upload-env', 'Upload .env file to CubeCloud')
        .option('--token <token>', 'Add auth token to CubeCloud')
        .option('--directory [path]', 'Specify path to conf directory', './')
        .action((options) => deploy({
        ...options,
        directory: path_1.default.join(process.cwd(), options.directory)
    })
        .catch(e => utils_1.displayError(e.stack || e)))
        .on('--help', () => {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('  $ cubejs deploy');
    });
}
exports.configureDeployCommand = configureDeployCommand;
//# sourceMappingURL=deploy.js.map