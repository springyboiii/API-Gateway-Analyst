import { RequestPromiseOptions } from 'request-promise';
import dotenv from '@cubejs-backend/dotenv';
declare type ConfigurationFull = {
    auth: {
        [organizationUrl: string]: {
            auth: string;
        };
    };
};
declare type Configuration = Partial<ConfigurationFull>;
export declare class Config {
    protected loadConfig(): Promise<Configuration>;
    protected writeConfig(config: any): Promise<void>;
    protected configFile(): {
        cubeCloudConfigPath: string;
        configFile: string;
    };
    envFile(envFile: string): Promise<dotenv.DotenvParseOutput>;
    protected cubeEnvConfigPath(): string;
    protected cubeCloudConfigPath(): string;
    deployAuth(url?: string): Promise<{
        [organizationUrl: string]: {
            auth: string;
        };
    }>;
    addAuthToken(authToken: string, config?: Configuration): Promise<ConfigurationFull>;
    protected deployAuthForCurrentDir(): any;
    protected dotCubeCloudFile(): string;
    protected loadDotCubeCloud(): Promise<any>;
    protected writeDotCubeCloud(config: any): Promise<void>;
    cloudReq(options: {
        url: (deploymentId: string) => string;
        auth: {
            auth: string;
            deploymentId?: string;
            url?: string;
        };
    } & RequestPromiseOptions): any;
    protected cloudTokenReq(authToken: string): Promise<any>;
}
export {};
//# sourceMappingURL=config.d.ts.map