"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMaxVersion = exports.logStage = exports.displayError = exports.event = exports.loadCliManifest = exports.displayWarning = exports.npmInstall = exports.writePackageJson = exports.executeCommand = void 0;
const os_1 = __importDefault(require("os"));
const cross_spawn_1 = require("cross-spawn");
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const shared_1 = require("@cubejs-backend/shared");
const semver_1 = require("semver");
const executeCommand = (command, args) => {
    const child = cross_spawn_1.spawn(command, args, { stdio: 'inherit' });
    return new Promise((resolve, reject) => {
        child.on('close', (code) => {
            if (code !== 0) {
                reject(new Error(`${command} ${args.join(' ')} failed with exit code ${code}`));
                return;
            }
            resolve();
        });
    });
};
exports.executeCommand = executeCommand;
const writePackageJson = async (json) => fs_extra_1.default.writeJson('package.json', json, {
    spaces: 2,
    EOL: os_1.default.EOL
});
exports.writePackageJson = writePackageJson;
const npmInstall = (dependencies, isDev) => exports.executeCommand('npm', ['install', isDev ? '--save-dev' : '--save'].concat(dependencies));
exports.npmInstall = npmInstall;
const displayWarning = (message) => {
    console.log(`${chalk_1.default.yellow('Warning.')} ${message}`);
};
exports.displayWarning = displayWarning;
function loadCliManifest() {
    // eslint-disable-next-line global-require
    return require('../../package.json');
}
exports.loadCliManifest = loadCliManifest;
async function event(opts) {
    try {
        await shared_1.track({
            ...opts,
            cliVersion: loadCliManifest().version,
        });
    }
    catch (e) {
        shared_1.internalExceptions(e);
    }
}
exports.event = event;
const displayError = async (text, options = {}) => {
    console.error('');
    console.error(chalk_1.default.cyan('Cube.js Error ---------------------------------------'));
    console.error('');
    if (Array.isArray(text)) {
        text.forEach((str) => console.error(str));
    }
    else {
        console.error(text);
    }
    console.error('');
    console.error(chalk_1.default.yellow('Need some help? -------------------------------------'));
    await event({
        event: 'Error',
        error: Array.isArray(text) ? text.join('\n') : text.toString(),
        ...options
    });
    console.error('');
    console.error(`${chalk_1.default.yellow('  Ask this question in Cube.js Slack:')} https://slack.cube.dev`);
    console.error(`${chalk_1.default.yellow('  Post an issue:')} https://github.com/cube-js/cube.js/issues`);
    console.error('');
    process.exit(1);
};
exports.displayError = displayError;
const logStage = async (stage, eventName, props) => {
    console.log(`- ${stage}`);
    if (eventName) {
        await shared_1.track({
            event: eventName,
            ...props
        });
    }
};
exports.logStage = logStage;
function findMaxVersion(versions) {
    return versions
        .map((v) => semver_1.parse(v))
        .reduce((a, b) => (semver_1.compare(a, b) === 1 ? a : b));
}
exports.findMaxVersion = findMaxVersion;
//# sourceMappingURL=utils.js.map